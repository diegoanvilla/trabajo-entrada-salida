{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admins\\\\Desktop\\\\Universidad\\\\trabajo-memorias - Copy\\\\src\\\\components\\\\fragmentacionExterna.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useMemoria } from \"./memoryContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FragmentacionExterna() {\n  const entrada = [{\n    dispositivo: \"Teclado\",\n    velocidad: \"10 Bps\"\n  }, {\n    dispositivo: \"Mouse\",\n    velocidad: \"1Bps - 1Kbs\"\n  }, {\n    dispositivo: \"microfono\",\n    velocidad: \"64Kbs\"\n  }]; // const { espacio, setEspacio } = useMemoria();\n  // const kb = useRef();\n  // const [procesos, setProcesos] = useState([]);\n  // const addProcess = (kb) => {\n  //   if (procesos.length === 8 || kb > 8000) return alert(\"No hay espacio\");\n  //   return setProcesos((p) => [...p, { espacio: kb }]);\n  // };\n  // useEffect(() => {\n  //   if (!procesos.length) return;\n  //   const espacioContainer = espacio;\n  //   try {\n  //     let procesoEspacio = procesos[procesos.length - 1].espacio;\n  //     while (procesoEspacio > 0) {\n  //       for (let y = 0; y < espacio.length; y++) {\n  //         if (espacio[y].ocupado === 0) {\n  //           if (procesoEspacio > 1000) {\n  //             espacioContainer[y] = {\n  //               ocupado: 100,\n  //               proceso: `${procesos.length}`,\n  //             };\n  //             procesoEspacio = procesoEspacio - 1000;\n  //           } else {\n  //             espacioContainer[y] = {\n  //               ocupado: procesoEspacio / 10,\n  //               proceso: `${procesos.length}`,\n  //             };\n  //             procesoEspacio = 0;\n  //             break;\n  //           }\n  //         }\n  //         console.log(procesoEspacio > 0);\n  //         if (y === espacio.length - 1 && procesoEspacio > 0) {\n  //           setProcesos((p) =>\n  //             p.filter((item, i) => i !== procesos.length - 1)\n  //           );\n  //           throw \"No hay espacio\";\n  //         }\n  //       }\n  //     }\n  //     setEspacio((e) => [...espacioContainer]);\n  //   } catch (err) {\n  //     console.log(procesos);\n  //     alert(err);\n  //   }\n  // }, [procesos]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"titulo\",\n      children: \"Dispositivos de entrada:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), entrada.map(i => {})]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_c = FragmentacionExterna;\nexport default FragmentacionExterna;\n\nvar _c;\n\n$RefreshReg$(_c, \"FragmentacionExterna\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useMemoria","FragmentacionExterna","entrada","dispositivo","velocidad","map","i"],"sources":["C:/Users/admins/Desktop/Universidad/trabajo-memorias - Copy/src/components/fragmentacionExterna.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { useMemoria } from \"./memoryContext\";\r\nfunction FragmentacionExterna() {\r\n  const entrada = [\r\n    { dispositivo: \"Teclado\", velocidad: \"10 Bps\" },\r\n    { dispositivo: \"Mouse\", velocidad: \"1Bps - 1Kbs\" },\r\n    { dispositivo: \"microfono\", velocidad: \"64Kbs\" },\r\n  ];\r\n  // const { espacio, setEspacio } = useMemoria();\r\n  // const kb = useRef();\r\n  // const [procesos, setProcesos] = useState([]);\r\n  // const addProcess = (kb) => {\r\n  //   if (procesos.length === 8 || kb > 8000) return alert(\"No hay espacio\");\r\n  //   return setProcesos((p) => [...p, { espacio: kb }]);\r\n  // };\r\n  // useEffect(() => {\r\n  //   if (!procesos.length) return;\r\n  //   const espacioContainer = espacio;\r\n  //   try {\r\n  //     let procesoEspacio = procesos[procesos.length - 1].espacio;\r\n  //     while (procesoEspacio > 0) {\r\n  //       for (let y = 0; y < espacio.length; y++) {\r\n  //         if (espacio[y].ocupado === 0) {\r\n  //           if (procesoEspacio > 1000) {\r\n  //             espacioContainer[y] = {\r\n  //               ocupado: 100,\r\n  //               proceso: `${procesos.length}`,\r\n  //             };\r\n  //             procesoEspacio = procesoEspacio - 1000;\r\n  //           } else {\r\n  //             espacioContainer[y] = {\r\n  //               ocupado: procesoEspacio / 10,\r\n  //               proceso: `${procesos.length}`,\r\n  //             };\r\n  //             procesoEspacio = 0;\r\n  //             break;\r\n  //           }\r\n  //         }\r\n  //         console.log(procesoEspacio > 0);\r\n  //         if (y === espacio.length - 1 && procesoEspacio > 0) {\r\n  //           setProcesos((p) =>\r\n  //             p.filter((item, i) => i !== procesos.length - 1)\r\n  //           );\r\n  //           throw \"No hay espacio\";\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //     setEspacio((e) => [...espacioContainer]);\r\n  //   } catch (err) {\r\n  //     console.log(procesos);\r\n  //     alert(err);\r\n  //   }\r\n  // }, [procesos]);\r\n  return (\r\n    <div>\r\n      <h1 className=\"titulo\">Dispositivos de entrada:</h1>\r\n      {entrada.map((i) => {})}\r\n      {/* <button onClick={() => addProcess(kb.current.value)}>AÃ±adir</button> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FragmentacionExterna;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,UAAT,QAA2B,iBAA3B;;;AACA,SAASC,oBAAT,GAAgC;EAC9B,MAAMC,OAAO,GAAG,CACd;IAAEC,WAAW,EAAE,SAAf;IAA0BC,SAAS,EAAE;EAArC,CADc,EAEd;IAAED,WAAW,EAAE,OAAf;IAAwBC,SAAS,EAAE;EAAnC,CAFc,EAGd;IAAED,WAAW,EAAE,WAAf;IAA4BC,SAAS,EAAE;EAAvC,CAHc,CAAhB,CAD8B,CAM9B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,oBACE;IAAA,wBACE;MAAI,SAAS,EAAC,QAAd;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAEGF,OAAO,CAACG,GAAR,CAAaC,CAAD,IAAO,CAAE,CAArB,CAFH;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD;;KA1DQL,oB;AA4DT,eAAeA,oBAAf"},"metadata":{},"sourceType":"module"}