{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admins\\\\Desktop\\\\Universidad\\\\trabajo-memorias - Copy\\\\src\\\\components\\\\fragmentacionInterna.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useMemoria } from \"./memoryContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FragmentacionInterna() {\n  _s();\n\n  const {\n    espacio,\n    setEspacio\n  } = useMemoria();\n  const kb = useRef();\n  const [procesos, setProcesos] = useState([]);\n\n  const addProcess = kb => {\n    if (procesos.length === 8 || kb > 1000) return alert(\"No hay espacio\");\n    return setProcesos(p => [...p, {\n      espacio: kb\n    }]);\n  };\n\n  useEffect(() => {\n    const espacioContainer = espacio;\n\n    for (let index = 0; index < procesos.length; index++) {\n      espacioContainer[index] = {\n        ocupado: procesos[index].espacio / 10,\n        proceso: `${index + 1}`\n      };\n    }\n\n    setEspacio(e => [...espacioContainer]);\n  }, [procesos]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"titulo\",\n      children: \"Fragmentacion Interna\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"titulo\",\n      children: \"A\\xF1adir nuevo proceso\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      name: \"\",\n      placeholder: \"espacio de tu proceso en kb\",\n      id: \"\",\n      ref: kb\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addProcess(kb.current.value),\n      children: \"A\\xF1adir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FragmentacionInterna, \"xRr+KtTiGY/3dtNbBXCLN3DGIhU=\", false, function () {\n  return [useMemoria];\n});\n\n_c = FragmentacionInterna;\nexport default FragmentacionInterna;\n\nvar _c;\n\n$RefreshReg$(_c, \"FragmentacionInterna\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useMemoria","FragmentacionInterna","espacio","setEspacio","kb","procesos","setProcesos","addProcess","length","alert","p","espacioContainer","index","ocupado","proceso","e","current","value"],"sources":["C:/Users/admins/Desktop/Universidad/trabajo-memorias - Copy/src/components/fragmentacionInterna.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { useMemoria } from \"./memoryContext\";\r\nfunction FragmentacionInterna() {\r\n  const { espacio, setEspacio } = useMemoria();\r\n  const kb = useRef();\r\n  const [procesos, setProcesos] = useState([]);\r\n  const addProcess = (kb) => {\r\n    if (procesos.length === 8 || kb > 1000) return alert(\"No hay espacio\");\r\n    return setProcesos((p) => [...p, { espacio: kb }]);\r\n  };\r\n  useEffect(() => {\r\n    const espacioContainer = espacio;\r\n    for (let index = 0; index < procesos.length; index++) {\r\n      espacioContainer[index] = {\r\n        ocupado: procesos[index].espacio / 10,\r\n        proceso: `${index + 1}`,\r\n      };\r\n    }\r\n    setEspacio((e) => [...espacioContainer]);\r\n  }, [procesos]);\r\n  return (\r\n    <div>\r\n      <h1 className=\"titulo\">Fragmentacion Interna</h1>\r\n      <h3 className=\"titulo\">Añadir nuevo proceso</h3>\r\n      <input\r\n        type=\"number\"\r\n        name=\"\"\r\n        placeholder=\"espacio de tu proceso en kb\"\r\n        id=\"\"\r\n        ref={kb}\r\n      />\r\n      <button onClick={() => addProcess(kb.current.value)}>Añadir</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FragmentacionInterna;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,UAAT,QAA2B,iBAA3B;;;AACA,SAASC,oBAAT,GAAgC;EAAA;;EAC9B,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAA0BH,UAAU,EAA1C;EACA,MAAMI,EAAE,GAAGP,MAAM,EAAjB;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;;EACA,MAAMQ,UAAU,GAAIH,EAAD,IAAQ;IACzB,IAAIC,QAAQ,CAACG,MAAT,KAAoB,CAApB,IAAyBJ,EAAE,GAAG,IAAlC,EAAwC,OAAOK,KAAK,CAAC,gBAAD,CAAZ;IACxC,OAAOH,WAAW,CAAEI,CAAD,IAAO,CAAC,GAAGA,CAAJ,EAAO;MAAER,OAAO,EAAEE;IAAX,CAAP,CAAR,CAAlB;EACD,CAHD;;EAIAN,SAAS,CAAC,MAAM;IACd,MAAMa,gBAAgB,GAAGT,OAAzB;;IACA,KAAK,IAAIU,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,QAAQ,CAACG,MAArC,EAA6CI,KAAK,EAAlD,EAAsD;MACpDD,gBAAgB,CAACC,KAAD,CAAhB,GAA0B;QACxBC,OAAO,EAAER,QAAQ,CAACO,KAAD,CAAR,CAAgBV,OAAhB,GAA0B,EADX;QAExBY,OAAO,EAAG,GAAEF,KAAK,GAAG,CAAE;MAFE,CAA1B;IAID;;IACDT,UAAU,CAAEY,CAAD,IAAO,CAAC,GAAGJ,gBAAJ,CAAR,CAAV;EACD,CATQ,EASN,CAACN,QAAD,CATM,CAAT;EAUA,oBACE;IAAA,wBACE;MAAI,SAAS,EAAC,QAAd;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAI,SAAS,EAAC,QAAd;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MACE,IAAI,EAAC,QADP;MAEE,IAAI,EAAC,EAFP;MAGE,WAAW,EAAC,6BAHd;MAIE,EAAE,EAAC,EAJL;MAKE,GAAG,EAAED;IALP;MAAA;MAAA;MAAA;IAAA,QAHF,eAUE;MAAQ,OAAO,EAAE,MAAMG,UAAU,CAACH,EAAE,CAACY,OAAH,CAAWC,KAAZ,CAAjC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAVF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAcD;;GAhCQhB,oB;UACyBD,U;;;KADzBC,oB;AAkCT,eAAeA,oBAAf"},"metadata":{},"sourceType":"module"}