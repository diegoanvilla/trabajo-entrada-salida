{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admins\\\\Desktop\\\\Universidad\\\\trabajo-memorias - Copy\\\\src\\\\components\\\\memoryContext.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoriaContext = /*#__PURE__*/React.createContext();\nexport function useMemoria() {\n  _s();\n\n  return useContext(MemoriaContext);\n}\n\n_s(useMemoria, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction MemoryContext(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const initialArray = [{\n    ocupado: false,\n    proceso: \"\"\n  }, {\n    ocupado: false,\n    proceso: \"\"\n  }, {\n    ocupado: false,\n    proceso: \"\"\n  }, {\n    ocupado: false,\n    proceso: \"\"\n  }, {\n    ocupado: false,\n    proceso: \"\"\n  }, {\n    ocupado: false,\n    proceso: \"\"\n  }, {\n    ocupado: false,\n    proceso: \"\"\n  }, {\n    ocupado: false,\n    proceso: \"\"\n  }];\n  const [espacio, setEspacio] = useState(initialArray);\n  const [procesos, setProcesos] = useState([]);\n\n  const addDispositivo = dispositivo => {\n    if (procesos.length === 8) return alert(\"No hay mas espacio\");\n    const slot = procesos.length;\n    setProcesos(p => [...p, {\n      dispositivo: \"Cargando\"\n    }]);\n    setTimeout(() => {\n      let procesosArray = procesos;\n      procesosArray[slot] = { ...dispositivo\n      };\n      return setProcesos(procesosArray);\n    }, 1000);\n  };\n\n  const initialize = () => {\n    setEspacio(p => [...initialArray]);\n  };\n\n  useEffect(() => {\n    const espacioContainer = espacio;\n\n    for (let index = 0; index < procesos.length; index++) {\n      espacioContainer[index] = {\n        ocupado: true,\n        proceso: procesos[index].velocidad,\n        dispositivo: procesos[index].dispositivo,\n        estrategia: procesos[index].estrategia\n      };\n    }\n\n    setEspacio(e => [...espacioContainer]);\n  }, [procesos]);\n  return /*#__PURE__*/_jsxDEV(MemoriaContext.Provider, {\n    value: {\n      espacio,\n      setEspacio,\n      initialize,\n      addDispositivo\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(MemoryContext, \"pWC9XGjnF/8vmULdp+rG1K/CW3A=\");\n\n_c = MemoryContext;\nexport default MemoryContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryContext\");","map":{"version":3,"names":["React","useState","useContext","useEffect","MemoriaContext","createContext","useMemoria","MemoryContext","children","initialArray","ocupado","proceso","espacio","setEspacio","procesos","setProcesos","addDispositivo","dispositivo","length","alert","slot","p","setTimeout","procesosArray","initialize","espacioContainer","index","velocidad","estrategia","e"],"sources":["C:/Users/admins/Desktop/Universidad/trabajo-memorias - Copy/src/components/memoryContext.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\n\r\nconst MemoriaContext = React.createContext();\r\nexport function useMemoria() {\r\n  return useContext(MemoriaContext);\r\n}\r\nfunction MemoryContext({ children }) {\r\n  const initialArray = [\r\n    {\r\n      ocupado: false,\r\n      proceso: \"\",\r\n    },\r\n    {\r\n      ocupado: false,\r\n      proceso: \"\",\r\n    },\r\n    {\r\n      ocupado: false,\r\n      proceso: \"\",\r\n    },\r\n    {\r\n      ocupado: false,\r\n      proceso: \"\",\r\n    },\r\n    {\r\n      ocupado: false,\r\n      proceso: \"\",\r\n    },\r\n    {\r\n      ocupado: false,\r\n      proceso: \"\",\r\n    },\r\n    {\r\n      ocupado: false,\r\n      proceso: \"\",\r\n    },\r\n    {\r\n      ocupado: false,\r\n      proceso: \"\",\r\n    },\r\n  ];\r\n  const [espacio, setEspacio] = useState(initialArray);\r\n  const [procesos, setProcesos] = useState([]);\r\n  const addDispositivo = (dispositivo) => {\r\n    if (procesos.length === 8) return alert(\"No hay mas espacio\");\r\n    const slot = procesos.length;\r\n    setProcesos((p) => [...p, { dispositivo: \"Cargando\" }]);\r\n    setTimeout(() => {\r\n      let procesosArray = procesos;\r\n      procesosArray[slot] = { ...dispositivo };\r\n      return setProcesos(procesosArray);\r\n    }, 1000);\r\n  };\r\n  const initialize = () => {\r\n    setEspacio((p) => [...initialArray]);\r\n  };\r\n  useEffect(() => {\r\n    const espacioContainer = espacio;\r\n    for (let index = 0; index < procesos.length; index++) {\r\n      espacioContainer[index] = {\r\n        ocupado: true,\r\n        proceso: procesos[index].velocidad,\r\n        dispositivo: procesos[index].dispositivo,\r\n        estrategia: procesos[index].estrategia,\r\n      };\r\n    }\r\n    setEspacio((e) => [...espacioContainer]);\r\n  }, [procesos]);\r\n  return (\r\n    <MemoriaContext.Provider\r\n      value={{ espacio, setEspacio, initialize, addDispositivo }}\r\n    >\r\n      {children}\r\n    </MemoriaContext.Provider>\r\n  );\r\n}\r\nexport default MemoryContext;\r\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;;AAEA,MAAMC,cAAc,gBAAGJ,KAAK,CAACK,aAAN,EAAvB;AACA,OAAO,SAASC,UAAT,GAAsB;EAAA;;EAC3B,OAAOJ,UAAU,CAACE,cAAD,CAAjB;AACD;;GAFeE,U;;AAGhB,SAASC,aAAT,OAAqC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EACnC,MAAMC,YAAY,GAAG,CACnB;IACEC,OAAO,EAAE,KADX;IAEEC,OAAO,EAAE;EAFX,CADmB,EAKnB;IACED,OAAO,EAAE,KADX;IAEEC,OAAO,EAAE;EAFX,CALmB,EASnB;IACED,OAAO,EAAE,KADX;IAEEC,OAAO,EAAE;EAFX,CATmB,EAanB;IACED,OAAO,EAAE,KADX;IAEEC,OAAO,EAAE;EAFX,CAbmB,EAiBnB;IACED,OAAO,EAAE,KADX;IAEEC,OAAO,EAAE;EAFX,CAjBmB,EAqBnB;IACED,OAAO,EAAE,KADX;IAEEC,OAAO,EAAE;EAFX,CArBmB,EAyBnB;IACED,OAAO,EAAE,KADX;IAEEC,OAAO,EAAE;EAFX,CAzBmB,EA6BnB;IACED,OAAO,EAAE,KADX;IAEEC,OAAO,EAAE;EAFX,CA7BmB,CAArB;EAkCA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAACQ,YAAD,CAAtC;EACA,MAAM,CAACK,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;;EACA,MAAMe,cAAc,GAAIC,WAAD,IAAiB;IACtC,IAAIH,QAAQ,CAACI,MAAT,KAAoB,CAAxB,EAA2B,OAAOC,KAAK,CAAC,oBAAD,CAAZ;IAC3B,MAAMC,IAAI,GAAGN,QAAQ,CAACI,MAAtB;IACAH,WAAW,CAAEM,CAAD,IAAO,CAAC,GAAGA,CAAJ,EAAO;MAAEJ,WAAW,EAAE;IAAf,CAAP,CAAR,CAAX;IACAK,UAAU,CAAC,MAAM;MACf,IAAIC,aAAa,GAAGT,QAApB;MACAS,aAAa,CAACH,IAAD,CAAb,GAAsB,EAAE,GAAGH;MAAL,CAAtB;MACA,OAAOF,WAAW,CAACQ,aAAD,CAAlB;IACD,CAJS,EAIP,IAJO,CAAV;EAKD,CATD;;EAUA,MAAMC,UAAU,GAAG,MAAM;IACvBX,UAAU,CAAEQ,CAAD,IAAO,CAAC,GAAGZ,YAAJ,CAAR,CAAV;EACD,CAFD;;EAGAN,SAAS,CAAC,MAAM;IACd,MAAMsB,gBAAgB,GAAGb,OAAzB;;IACA,KAAK,IAAIc,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGZ,QAAQ,CAACI,MAArC,EAA6CQ,KAAK,EAAlD,EAAsD;MACpDD,gBAAgB,CAACC,KAAD,CAAhB,GAA0B;QACxBhB,OAAO,EAAE,IADe;QAExBC,OAAO,EAAEG,QAAQ,CAACY,KAAD,CAAR,CAAgBC,SAFD;QAGxBV,WAAW,EAAEH,QAAQ,CAACY,KAAD,CAAR,CAAgBT,WAHL;QAIxBW,UAAU,EAAEd,QAAQ,CAACY,KAAD,CAAR,CAAgBE;MAJJ,CAA1B;IAMD;;IACDf,UAAU,CAAEgB,CAAD,IAAO,CAAC,GAAGJ,gBAAJ,CAAR,CAAV;EACD,CAXQ,EAWN,CAACX,QAAD,CAXM,CAAT;EAYA,oBACE,QAAC,cAAD,CAAgB,QAAhB;IACE,KAAK,EAAE;MAAEF,OAAF;MAAWC,UAAX;MAAuBW,UAAvB;MAAmCR;IAAnC,CADT;IAAA,UAGGR;EAHH;IAAA;IAAA;IAAA;EAAA,QADF;AAOD;;IArEQD,a;;KAAAA,a;AAsET,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}